{"version":3,"sources":["hook/useLocalStorage.ts","components/Editor/Editor.tsx","page/Home.tsx","root/App.tsx","config/serviceWorker.ts","index.tsx"],"names":["useLocalStorage","key","initialValue","prefixKey","useState","jsonValue","localStorage","getItem","JSON","parse","err","console","log","value","setValue","useEffect","setItem","stringify","Editor","language","displayName","onChange","open","setOpen","className","type","onClick","prevOpen","icon","faCompressAlt","faExpandAlt","onBeforeChange","editor","data","options","lineWrapping","lint","mode","theme","lineNumbers","Home","html","setHtml","css","setCss","js","setJs","srcDoc","setSrcDoc","timeout","setTimeout","clearTimeout","title","sandbox","frameBorder","width","height","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0QAOaA,EAAkB,SAACC,EAAaC,GAC3C,IAAMC,EAHO,iBAGsBF,EADiC,EAE1CG,oBAAS,WACjC,IAAMC,EAAYC,aAAaC,QAAQJ,GACvC,GAAiB,MAAbE,EAAmB,OAAOG,KAAKC,MAAMJ,GAEzC,IACE,GAA4B,oBAAjBH,EACT,OAAOA,EAET,MAAOQ,GACPC,QAAQC,IAAR,UAAeF,QAXiD,mBAE7DG,EAF6D,KAEtDC,EAFsD,KAmBpE,OAJAC,qBAAU,WACRT,aAAaU,QAAQb,EAAWK,KAAKS,UAAUJ,MAC9C,CAACV,EAAWU,IAER,CAACA,EAAOC,I,sDCRJI,G,MAAgC,SAAC,GAK1B,IAJlBC,EAIiB,EAJjBA,SACAC,EAGiB,EAHjBA,YACAP,EAEiB,EAFjBA,MACAQ,EACiB,EADjBA,SACiB,EACOjB,oBAAkB,GADzB,mBACVkB,EADU,KACJC,EADI,KAOjB,OACE,yBAAKC,UAAS,2BAAsBF,EAAO,GAAK,cAC9C,yBAAKE,UAAU,gBACZJ,EACD,4BACEK,KAAK,SACLD,UAAU,sBACVE,QAAS,kBAAMH,GAAQ,SAACI,GAAD,OAAeA,OAEtC,kBAAC,IAAD,CAAiBC,KAAMN,EAAOO,IAAgBC,QAGlD,kBAAC,aAAD,CACEC,eAjBe,SAACC,EAAaC,EAAWpB,GAC5CQ,EAASR,IAiBLA,MAAOA,EACPW,UAAU,sBACVU,QAAS,CACPC,cAAc,EACdC,MAAM,EACNC,KAAMlB,EACNmB,MAAO,WACPC,aAAa,QC9CVC,G,MAAiB,WAAoB,IAAD,EACvBxC,EAAgB,OAAQ,IADD,mBACxCyC,EADwC,KAClCC,EADkC,OAEzB1C,EAAgB,MAAO,IAFE,mBAExC2C,EAFwC,KAEnCC,EAFmC,OAG3B5C,EAAgB,KAAM,IAHK,mBAGxC6C,EAHwC,KAGpCC,EAHoC,OAInB1C,mBAAiB,IAJE,mBAIxC2C,EAJwC,KAIhCC,EAJgC,KAoB/C,OAdAjC,qBAAU,WACR,IAAMkC,EAAUC,YAAW,WACzBF,EAAU,qCAAD,OAEGP,EAFH,qCAGIE,EAHJ,uCAIKE,EAJL,0CAOR,KAEH,OAAO,kBAAMM,aAAaF,MACzB,CAACR,EAAME,EAAKE,IAGb,6BACE,yBAAKrB,UAAU,iBACb,kBAAC,EAAD,CAAQL,SAAS,MAAMC,YAAY,OAAOP,MAAO4B,EAAMpB,SAAUqB,IACjE,kBAAC,EAAD,CAAQvB,SAAS,MAAMC,YAAY,MAAMP,MAAO8B,EAAKtB,SAAUuB,IAC/D,kBAAC,EAAD,CAAQzB,SAAS,aAAaC,YAAY,KAAKP,MAAOgC,EAAIxB,SAAUyB,KAEtE,yBAAKtB,UAAU,QACb,4BACEuB,OAAQA,EACRK,MAAM,SACNC,QAAQ,gBACRC,YAAY,IACZC,MAAM,OACNC,OAAO,aC3BFC,G,MARO,WACpB,OACE,yBAAKjC,UAAU,OACb,kBAAC,EAAD,SCKckC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCZnCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNhE,QAAQgE,MAAMA,EAAMC,c","file":"static/js/main.31d70469.chunk.js","sourcesContent":["// This custom hook stores user input code\n// User's code store localStorage in browser\n\nimport { useState, useEffect } from 'react';\n\nconst PREFIX = 'codepen-clone-';\n\nexport const useLocalStorage = (key: string, initialValue: string) => {\n  const prefixKey: string = PREFIX + key;\n  const [value, setValue] = useState(() => {\n    const jsonValue = localStorage.getItem(prefixKey);\n    if (jsonValue != null) return JSON.parse(jsonValue);\n\n    try {\n      if (typeof initialValue !== 'function') {\n        return initialValue;\n      }\n    } catch (err) {\n      console.log(`${err}`);\n    }\n  });\n\n  useEffect(() => {\n    localStorage.setItem(prefixKey, JSON.stringify(value));\n  }, [prefixKey, value]);\n\n  return [value, setValue];\n};\n","import React, { useState } from 'react';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/material.css';\nimport 'codemirror/mode/xml/xml';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/mode/css/css';\nimport { Controlled as ControlledEditor } from 'react-codemirror2';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCompressAlt, faExpandAlt } from '@fortawesome/free-solid-svg-icons';\nimport './Editor.css';\n\ntype EditorProps = {\n  language: string;\n  displayName: string;\n  value: string;\n  onChange: Function;\n};\n\nexport const Editor: React.FC<EditorProps> = ({\n  language,\n  displayName,\n  value,\n  onChange,\n}): JSX.Element => {\n  const [open, setOpen] = useState<boolean>(true);\n\n  const handleChange = (editor: any, data: any, value: string): void => {\n    onChange(value);\n  };\n\n  return (\n    <div className={`editor-container ${open ? '' : 'collapsed'}`}>\n      <div className=\"editor-title\">\n        {displayName}\n        <button\n          type=\"button\"\n          className=\"expand-collapse-btn\"\n          onClick={() => setOpen((prevOpen) => !prevOpen)}\n        >\n          <FontAwesomeIcon icon={open ? faCompressAlt : faExpandAlt} />\n        </button>\n      </div>\n      <ControlledEditor\n        onBeforeChange={handleChange}\n        value={value}\n        className=\"code-mirror-wrapper\"\n        options={{\n          lineWrapping: true,\n          lint: true,\n          mode: language,\n          theme: 'material',\n          lineNumbers: true,\n        }}\n      />\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { useLocalStorage } from '../hook/useLocalStorage';\nimport { Editor } from '../components/Editor/Editor';\nimport './Home.css';\n\nexport const Home: React.FC = (): JSX.Element => {\n  const [html, setHtml] = useLocalStorage('html', '');\n  const [css, setCss] = useLocalStorage('css', '');\n  const [js, setJs] = useLocalStorage('js', '');\n  const [srcDoc, setSrcDoc] = useState<string>('');\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setSrcDoc(`\n        <html>\n          <body>${html}</body>\n          <style>${css}</style>\n          <script>${js}</script>\n        </html>\n      `);\n    }, 250);\n\n    return () => clearTimeout(timeout);\n  }, [html, css, js]);\n\n  return (\n    <div>\n      <div className=\"pane top-pane\">\n        <Editor language=\"xml\" displayName=\"HTML\" value={html} onChange={setHtml} />\n        <Editor language=\"css\" displayName=\"CSS\" value={css} onChange={setCss} />\n        <Editor language=\"javascript\" displayName=\"JS\" value={js} onChange={setJs} />\n      </div>\n      <div className=\"pane\">\n        <iframe\n          srcDoc={srcDoc}\n          title=\"output\"\n          sandbox=\"allow-scripts\"\n          frameBorder=\"0\"\n          width=\"100%\"\n          height=\"100%\"\n        />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Home } from '../page/Home';\nimport './App.css';\n\nconst App: React.FC = (): JSX.Element => {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './root/App';\nimport * as serviceWorker from './config/serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}